"Ages 65-69", "Ages 70-79", "Ages 80-89", "Ages 90+")
View(df)
## Step 2: Create the conditional probability matrix, common probability matrix, and binary correlation matrix.
#find marginal probabilities
marg_probs <- colMeans(df)
marg_probs #they match probabilities we used to construct the dataframes!
#create conditional prob matrix
cond_mat <- condprob(df)
cond_mat
#compute common probability matrix
com_prob_mat <- cond_mat*marg_probs
com_prob_mat
#compute binary correlation matrix
cor_mat <- cor(df, method = "pearson")
cor_mat
## Step 3: Extract Correlation Structure
#Testing out the function using common probability argument
set.seed(600)
commtest <- rmvbin(n, margprob=marg_probs, commonprob=com_prob_mat)
#Testing out the function using the binary correlation argument
set.seed(600)
bincorrtest <- rmvbin(n, margprob = marg_probs, bincorr = cor_mat)
#Do these two tests yield similar results/are the structures similar?
all.equal(commtest, bincorrtest)
# Create healthcare spending outcome variable as a function of demographics and HCCs
df <- df %>%
mutate(Spending = rtruncnorm(n, a=100, b=100000,
7000-
100*`Female Sex`+
200*Arthritis+
1000*Cancer-
60*Diabetes-
100*Hypertension+
300*Diabetes*Hypertension+
4000*`Coronary Atherosclerosis or Other Chronic Ischemic Heart Disease`-
6*sin(`Other Musculoskeletal and Connective Tissue Disorders`)-
200*`Major Symptoms_Abnormalities`*Cancer+
20*`EMN Disorders`-
400*`Ages 65-69`-
200*`Ages 70-79`+
400*`Ages 80-89`+
1000*`Ages 90+`-
100*`Female Sex`*`Ages 65-69`-
200*`Female Sex`*`Ages 70-79`, 2000))
View(df)
# Create healthcare spending outcome variable as a function of demographics and HCCs
df <- df %>%
mutate(Spending = rtruncnorm(n, a=100, b=100000,
7000-
100*`Female Sex`+
200*Arthritis+
1000*Cancer-
60*Diabetes-
100*Hypertension+
300*Diabetes*Hypertension+
4000*`Coronary Atherosclerosis or Other Chronic Ischemic Heart Disease`-
6*sin(`Other Musculoskeletal and Connective Tissue Disorders`)-
200*`Major Symptoms_Abnormalities`*Cancer+
20*`EMN Disorders`-
400*`Ages 65-69`-
200*`Ages 70-79`+
400*`Ages 80-89`+
1000*`Ages 90+`-
100*`Female Sex`*`Ages 65-69`-
200*`Female Sex`*`Ages 70-79`, 2000))
View(df)
### Run a regression
regression1 <- glm(data=df, formula=Spending~`Female Sex`+Arthritis+Cancer+Diabetes+Hypertension+`Coronary Atherosclerosis or Other Chronic Ischemic Heart Disease` + `Other Musculoskeletal and Connective Tissue Disorders`+ `Major Symptoms_Abnormalities`+`EMN Disorders`+`Ages 65-69`+`Ages 70-79`+ `Ages 80-89`+ `Ages 90+`, family= "gaussian")
regression1
Y<-predict(regression1)
summary(df$Spending-Y)
plot(df$Spending-Y, main="Residuals from Regression 1", ylab="Residual", xlab="Observations")
library(SuperLearner)
SL.library <- c("SL.glm", "SL.randomForest", "SL.glmnet")
fit.df.SL<-SuperLearner(Y=df$Spending, X=df[,1:13],
SL.library=SL.library, family=gaussian(),
method="method.NNLS", verbose=TRUE)
#CV risks for algorithms in the library
fit.df.SL
#Run the cross-validated super learner to obtain its CV risk
fitSL.df.CV <- CV.SuperLearner(Y=df[,14],X=df[,1:13], V=10,
SL.library=SL.library, verbose = TRUE,
method = "method.NNLS", family = gaussian())
#CV risk for super learner
mean((df[,14]-fitSL.df.CV$SL.predict)^2)
# Create healthcare spending outcome variable as a function of demographics and HCCs
df <- df %>%
mutate(Spending = rtruncnorm(n, a=100, b=100000,
7000-
100*`Female Sex`+
200*Arthritis+
1000*Cancer-
60*Diabetes-
100*Hypertension+
300*Diabetes*Hypertension+
4000*`Coronary Atherosclerosis or Other Chronic Ischemic Heart Disease`-
6*sin(`Other Musculoskeletal and Connective Tissue Disorders`)-
200*`Major Symptoms_Abnormalities`*Cancer+
20*`EMN Disorders`-
400*`Ages 65-69`-
200*`Ages 70-79`+
400*`Ages 80-89`+
1000*`Ages 90+`-
100*`Female Sex`*`Ages 65-69`-
200*`Female Sex`*`Ages 70-79`, 2000))
View(df)
### Run a regression
regression1 <- glm(data=df, formula=Spending~`Female Sex`+Arthritis+Cancer+Diabetes+Hypertension+`Coronary Atherosclerosis or Other Chronic Ischemic Heart Disease` + `Other Musculoskeletal and Connective Tissue Disorders`+ `Major Symptoms_Abnormalities`+`EMN Disorders`+`Ages 65-69`+`Ages 70-79`+ `Ages 80-89`+ `Ages 90+`, family= "gaussian")
regression1
##Prediction of spending
Y<-predict(regression1)
##Summary of residual
summary(df$Spending-Y)
##plot of residuals between spending prediction of the formula used to generate the Spending variable in df and the prediction of regression1
plot(df$Spending-Y, main="Residuals from Regression 1", ylab="Residual", xlab="Observations")
##Taking the avarage of glm, randomForest and glmnet algorithms
library(SuperLearner)
SL.library <- c("SL.glm", "SL.randomForest", "SL.glmnet")
fit.df.SL<-SuperLearner(Y=df$Spending, X=df[,1:13],
SL.library=SL.library, family=gaussian(),
method="method.NNLS", verbose=TRUE)
#CV risks for algorithms in the library
fit.df.SL
library(rpart)
rpart1<-rpart(df$Spending~`Female Sex`+Arthritis+Cancer+Diabetes+Hypertension+`Coronary Atherosclerosis or Other Chronic Ischemic Heart Disease` + `Other Musculoskeletal and Connective Tissue Disorders`+ `Major Symptoms_Abnormalities`+`EMN Disorders`+`Ages 65-69`+`Ages 70-79`+ `Ages 80-89`+ `Ages 90+`)
Y1 <- df$`Female Sex`+df$Arthritis+df$Cancer+df$Diabetes+df$Hypertension+df$`Coronary Atherosclerosis or Other Chronic Ischemic Heart Disease` + df$`Other Musculoskeletal and Connective Tissue Disorders`+ df$`Major Symptoms_Abnormalities`+df$`EMN Disorders`+df$`Ages 65-69`+df$`Ages 70-79`+ df$`Ages 80-89`+ df$`Ages 90+`
rpart1<-rpart(df$Spending~Y1)
plot(rpart1)
text(rpart1, use.n=TRUE, cex=0.5)
head(predict(rpart1))
install.packages("glmnet")
install.packages("glmnet")
library(SuperLearner)
SL.library <- c("SL.glm", "SL.randomForest", "SL.glmnet")
fit.df.SL<-SuperLearner(Y=df$Spending, X=df[,1:13],
SL.library=SL.library, family=gaussian(),
method="method.NNLS", verbose=TRUE)
library(SuperLearner)
SL.library <- c("SL.glm", "SL.randomForest", "SL.glmnet")
fit.data.SL<-SuperLearner(Y=df$Spending, X=df[,1:13],
SL.library=SL.library, family=gaussian(),
method="method.NNLS", verbose=TRUE)
#CV risks for algorithms in the library
fit.data.SL
library(SuperLearner)
SL.library <- c("SL.glm", "SL.randomForest", "SL.glmnet")
fit.df.SL<-SuperLearner(Y=df$Spending, X=df[,1:13],
SL.library=SL.library, family=gaussian(),
method="method.NNLS", verbose=TRUE)
#CV risks for algorithms in the library
fit.df.SL
#Run the cross-validated super learner to obtain its CV risk
fitSL.df.CV <- CV.SuperLearner(Y=df[,14],X=df[,1:13], V=10,
SL.library=SL.library, verbose = TRUE,
method = "method.NNLS", family = gaussian())
#CV risk for super learner
mean((df[,14]-fitSL.df.CV$SL.predict)^2)
library(SuperLearner)
SL.library <- c("SL.glm", "SL.randomForest", "SL.glmnet")
fit.df.SL<-SuperLearner(Y=df$Spending, X=df[,1:12],
SL.library=SL.library, family=gaussian(),
method="method.NNLS", verbose=TRUE)
#CV risks for algorithms in the library
fit.df.SL
library(bindata)
library(tidyverse)
library(truncnorm)
n <- 10000
set.seed(600)
female_sex_2016 <- rbinom(n, 1, 0.552)
age <- sample(x = c("age_65_69_2016", "age_70_79_2016", "age_80_89_2016", "age_90up_2016"),
size = n, replace = T, prob = c(.279, .451, .221, .049))
arthritis_2016 <- rbinom(n, 1, 0.289)
cancer_2016 <- rbinom(n, 1, 0.33)
diabetes_2016 <- rbinom(n, 1, 0.357)
hypertention <- rbinom (n, 1, 457915/1394701)
coronary_Atherosclerosis<- rbinom (n, 1, 169807/1394701)
musculoskeletal_issues <- rbinom(n, 1, 376220/1394701)
symptoms_of_abnormality <- rbinom(n, 1, 517269/1394701)
Endocronic_metabolic_nutritional_disorders <- rbinom(n, 1, 340288/1394701)
#create data frame of our 2016 variable characteristics:
df <- data.frame(female_sex_2016, age, arthritis_2016, cancer_2016, diabetes_2016, hypertention, coronary_Atherosclerosis, musculoskeletal_issues, symptoms_of_abnormality, Endocronic_metabolic_nutritional_disorders)
df <- df %>%
mutate("Ages 65-69" = ifelse(age == "age_65_69_2016", 1, 0)) %>%
mutate("Ages 70-79" = ifelse(age == "age_70_79_2016", 1, 0)) %>%
mutate("Ages 80-89" = ifelse(age == "age_80_89_2016", 1, 0)) %>%
mutate("Ages 90+" = ifelse(age == "age_90up_2016", 1, 0)) %>%
select(-c("age"))
colnames(df) <- c("FemaleSex", "Arthritis", "Cancer", "Diabetes", "Hypertension", "CoronaryAtherosclerosisorOtherChronicIschemicHeartDisease",
"OtherMusculoskeletalandConnectiveTissueDisorders", "MajorSymptomsAbnormalities", "EMNDisorders",
"Ages65_69", "Ages70_79", "Ages80_89", "Ages90_above")
View(df)
## Step 2: Create the conditional probability matrix, common probability matrix, and binary correlation matrix.
#find marginal probabilities
marg_probs <- colMeans(df)
marg_probs #they match probabilities we used to construct the dataframes!
#create conditional prob matrix
cond_mat <- condprob(df)
cond_mat
#compute common probability matrix
com_prob_mat <- cond_mat*marg_probs
com_prob_mat
#compute binary correlation matrix
cor_mat <- cor(df, method = "pearson")
cor_mat
## Step 3: Extract Correlation Structure
#Testing out the function using common probability argument
set.seed(600)
commtest <- rmvbin(n, margprob=marg_probs, commonprob=com_prob_mat)
#Testing out the function using the binary correlation argument
set.seed(600)
bincorrtest <- rmvbin(n, margprob = marg_probs, bincorr = cor_mat)
#Do these two tests yield similar results/are the structures similar?
all.equal(commtest, bincorrtest)
# Create healthcare spending outcome variable as a function of demographics and HCCs
df <- df %>%
mutate(Spending = rtruncnorm(n, a=100, b=100000,
7000-
100*FemaleSex+
200*Arthritis+
1000*Cancer-
60*Diabetes-
100*Hypertension+
300*Diabetes*Hypertension+
4000*CoronaryAtherosclerosisorOtherChronicIschemicHeartDisease-
6*sin(OtherMusculoskeletalandConnectiveTissueDisorders)-
200*MajorSymptomsAbnormalities*Cancer+
20*EMNDisorders-
400*Ages65_69-
200*Ages70_79+
400*Ages80_89+
1000*Ages90_above`-
100*FemaleSex*Ages65_69-
200*FemaleSex*Ages70_79, 2000))
View(df)
### Run a regression
regression1 <- glm(data=df, formula=Spending~FemaleSex+Arthritis+Cancer+Diabetes+Hypertension+CoronaryAtherosclerosisorOtherChronicIschemicHeartDisease + OtherMusculoskeletalandConnectiveTissueDisorders+ MajorSymptoms_Abnormalities+EMNDisorders+Ages65_69+Ages70_79+ Ages80_89+ Ages90_above, family= "gaussian")
regression1
##Prediction of spending
Y<-predict(regression1)
##Summary of residual
summary(df$Spending-Y)
##plot of residuals between spending prediction of the formula used to generate the Spending variable in df and the prediction of regression1
plot(df$Spending-Y, main="Residuals from Regression 1", ylab="Residual", xlab="Observations")
library(SuperLearner)
SL.library <- c("SL.glm", "SL.randomForest", "SL.glmnet")
fit.df.SL<-SuperLearner(Y=df$Spending, X=df[,1:12],
SL.library=SL.library, family=gaussian(),
method="method.NNLS", verbose=TRUE)
#CV risks for algorithms in the library
fit.df.SL
#Run the cross-validated super learner to obtain its CV risk
fitSL.df.CV <- CV.SuperLearner(Y=df[,14],X=df[,1:12], V=10,
SL.library=SL.library, verbose = TRUE,
method = "method.NNLS", family = gaussian())
#CV risk for super learner
mean((df[,14]-fitSL.df.CV$SL.predict)^2)
# Create healthcare spending outcome variable as a function of demographics and HCCs
df <- df %>%
mutate(Spending = rtruncnorm(n, a=100, b=100000,
7000-
100*FemaleSex+
200*Arthritis+
1000*Cancer-
60*Diabetes-
100*Hypertension+
300*Diabetes*Hypertension+
4000*CoronaryAtherosclerosisorOtherChronicIschemicHeartDisease-
6*sin(OtherMusculoskeletalandConnectiveTissueDisorders)-
200*MajorSymptomsAbnormalities*Cancer+
20*EMNDisorders-
400*Ages65_69-
200*Ages70_79+
400*Ages80_89+
1000*Ages90_above-
100*FemaleSex*Ages65_69-
200*FemaleSex*Ages70_79, 2000))
View(df)
### Run a regression
regression1 <- glm(data=df, formula=Spending~FemaleSex+Arthritis+Cancer+Diabetes+Hypertension+CoronaryAtherosclerosisorOtherChronicIschemicHeartDisease + OtherMusculoskeletalandConnectiveTissueDisorders+ MajorSymptoms_Abnormalities+EMNDisorders+Ages65_69+Ages70_79+ Ages80_89+ Ages90_above, family= "gaussian")
regression1
##Prediction of spending
Y<-predict(regression1)
##Summary of residual
summary(df$Spending-Y)
##plot of residuals between spending prediction of the formula used to generate the Spending variable in df and the prediction of regression1
plot(df$Spending-Y, main="Residuals from Regression 1", ylab="Residual", xlab="Observations")
library(SuperLearner)
SL.library <- c("SL.glm", "SL.randomForest", "SL.glmnet")
fit.df.SL<-SuperLearner(Y=df$Spending, X=df[,1:12],
SL.library=SL.library, family=gaussian(),
method="method.NNLS", verbose=TRUE)
#CV risks for algorithms in the library
fit.df.SL
#Run the cross-validated super learner to obtain its CV risk
fitSL.df.CV <- CV.SuperLearner(Y=df[,14],X=df[,1:12], V=10,
SL.library=SL.library, verbose = TRUE,
method = "method.NNLS", family = gaussian())
#CV risk for super learner
mean((df[,14]-fitSL.df.CV$SL.predict)^2)
library(bindata)
library(tidyverse)
library(truncnorm)
n <- 10000
set.seed(600)
female_sex_2016 <- rbinom(n, 1, 0.552)
age <- sample(x = c("age_65_69_2016", "age_70_79_2016", "age_80_89_2016", "age_90up_2016"),
size = n, replace = T, prob = c(.279, .451, .221, .049))
arthritis_2016 <- rbinom(n, 1, 0.289)
cancer_2016 <- rbinom(n, 1, 0.33)
diabetes_2016 <- rbinom(n, 1, 0.357)
hypertention <- rbinom (n, 1, 457915/1394701)
coronary_Atherosclerosis<- rbinom (n, 1, 169807/1394701)
musculoskeletal_issues <- rbinom(n, 1, 376220/1394701)
symptoms_of_abnormality <- rbinom(n, 1, 517269/1394701)
Endocronic_metabolic_nutritional_disorders <- rbinom(n, 1, 340288/1394701)
#create data frame of our 2016 variable characteristics:
df <- data.frame(female_sex_2016, age, arthritis_2016, cancer_2016, diabetes_2016, hypertention, coronary_Atherosclerosis, musculoskeletal_issues, symptoms_of_abnormality, Endocronic_metabolic_nutritional_disorders)
df <- df %>%
mutate("Ages 65-69" = ifelse(age == "age_65_69_2016", 1, 0)) %>%
mutate("Ages 70-79" = ifelse(age == "age_70_79_2016", 1, 0)) %>%
mutate("Ages 80-89" = ifelse(age == "age_80_89_2016", 1, 0)) %>%
mutate("Ages 90+" = ifelse(age == "age_90up_2016", 1, 0)) %>%
select(-c("age"))
colnames(df) <- c("FemaleSex", "Arthritis", "Cancer", "Diabetes", "Hypertension", "CoronaryAtherosclerosisorOtherChronicIschemicHeartDisease",
"OtherMusculoskeletalandConnectiveTissueDisorders", "MajorSymptomsAbnormalities", "EMNDisorders",
"Ages65_69", "Ages70_79", "Ages80_89", "Ages90_above")
View(df)
## Step 2: Create the conditional probability matrix, common probability matrix, and binary correlation matrix.
#find marginal probabilities
marg_probs <- colMeans(df)
marg_probs #they match probabilities we used to construct the dataframes!
#create conditional prob matrix
cond_mat <- condprob(df)
cond_mat
#compute common probability matrix
com_prob_mat <- cond_mat*marg_probs
com_prob_mat
#compute binary correlation matrix
cor_mat <- cor(df, method = "pearson")
cor_mat
## Step 3: Extract Correlation Structure
#Testing out the function using common probability argument
set.seed(600)
commtest <- rmvbin(n, margprob=marg_probs, commonprob=com_prob_mat)
#Testing out the function using the binary correlation argument
set.seed(600)
bincorrtest <- rmvbin(n, margprob = marg_probs, bincorr = cor_mat)
#Do these two tests yield similar results/are the structures similar?
all.equal(commtest, bincorrtest)
# Create healthcare spending outcome variable as a function of demographics and HCCs
df <- df %>%
mutate(Spending = rtruncnorm(n, a=100, b=100000,
7000-
100*FemaleSex+
200*Arthritis+
1000*Cancer-
60*Diabetes-
100*Hypertension+
300*Diabetes*Hypertension+
4000*CoronaryAtherosclerosisorOtherChronicIschemicHeartDisease-
6*sin(OtherMusculoskeletalandConnectiveTissueDisorders)-
200*MajorSymptomsAbnormalities*Cancer+
20*EMNDisorders-
400*Ages65_69-
200*Ages70_79+
400*Ages80_89+
1000*Ages90_above-
100*FemaleSex*Ages65_69-
200*FemaleSex*Ages70_79, 2000))
View(df)
### Run a regression
regression1 <- glm(data=df, formula=Spending~FemaleSex+Arthritis+Cancer+Diabetes+Hypertension+CoronaryAtherosclerosisorOtherChronicIschemicHeartDisease + OtherMusculoskeletalandConnectiveTissueDisorders+ MajorSymptoms_Abnormalities+EMNDisorders+Ages65_69+Ages70_79+ Ages80_89+ Ages90_above, family= "gaussian")
regression1
##Prediction of spending
Y<-predict(regression1)
##Summary of residual
summary(df$Spending-Y)
##plot of residuals between spending prediction of the formula used to generate the Spending variable in df and the prediction of regression1
plot(df$Spending-Y, main="Residuals from Regression 1", ylab="Residual", xlab="Observations")
library(SuperLearner)
SL.library <- c("SL.glm", "SL.randomForest", "SL.glmnet")
fit.df.SL<-SuperLearner(Y=df$Spending, X=df[,1:12],
SL.library=SL.library, family=gaussian(),
method="method.NNLS", verbose=TRUE)
#CV risks for algorithms in the library
fit.df.SL
#Run the cross-validated super learner to obtain its CV risk
fitSL.df.CV <- CV.SuperLearner(Y=df[,14],X=df[,1:12], V=10,
SL.library=SL.library, verbose = TRUE,
method = "method.NNLS", family = gaussian())
library(ggplot2)
library(readxl)
library(tidyr)
library(ggplot2)
library(readxl)
library(tidyr)
pain_data <-read_csv("Desktop/pain.csv")
library(lme4)
library(lme4)
view(pain_data)
View(pain_data)
pain_data <-read_csv("Desktop/pain.csv")
library(readxl)
pain_data <-read_csv("Desktop/pain.csv")
install.packages("readxl")
pain_data <-read_csv("Desktop/pain.csv")
pain_data <-read.csv("Desktop/pain.csv")
View(pain_data)
fit.random = lmer (paintol~(1|ID)+ trt + cs + trt*cs, data = pain_data)
fit.random = lmer (paintol~(1|id)+ trt + cs + trt*cs, data = pain_data)
summary (fit.random)
fit.random = lmer (paintol~(1|id)+ factor(trt) + factor(cs) + factor(trt)* factor(cs), data = pain_data)
summary (fit.random)
fit.model1 =lmer (paintol~(1|id)+ factor(trt) + factor(cs), data = pain_data)
fit.random = lmer (paintol~(1|id)+ factor(trt) + factor(cs) + factor(trt)* factor(cs), data = pain_data)
summary (fit.random)
summary(fit.model1)
library(readr)
library(dplyr)
library(lubridate)
surv_data <- format(surv_data$admitdate, "%Y-%m-%d")
surv_data <- read.table("whas100_rev.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
load("~/.RData")
library(readr)
library(dplyr)
library(lubridate)
#import data
surv_data <- read.table("whas100_rev.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
surv_data <- read.table("Downloads/whas100_rev.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
View(surv_data)
surv_data <- format(surv_data$admitdate, "%Y-%m-%d")
surv_data <- format(surv_data$admitdate, "%Y-%m-%d")
library(readr)
library(dplyr)
library(lubridate)
surv_data <- read.table("Downloads/whas100_rev.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
View(surv_data)
surv_data <- format(surv_data$admitdate, "%Y-%m-%d")
surv_data_with_var <- surv_data %>%
mutate(surv_time= ifelse(!is.na(admitdate) & !is.na(Date.of.Death), as.numeric(difftime(Date.of.Death, admitdate, unit="days")), NA)) %>%
mutate(binary_death= ifelse(VitalStatus=="Dead", 1, 0))
install.packages("lubridate")
install.packages("dplyr")
surv_data <- read.table("Downloads/whas100_rev.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
View(surv_data)
surv_data <- format(surv_data$admitdate, "%Y-%m-%d")
library(readr)
library(dplyr)
library(lubridate)
surv_data <- read.table("Downloads/whas100_rev.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
View(surv_data)
surv_data <- format(surv_data$admitdate, "%Y-%m-%d")
surv_data <- format(as.Date(surv_data$admitdate), "%Y-%m-%d")
surv_data <- as.Date(surv_data$admitdate, format="%d/%m/%Y")
surv_data <- as.Date(surv_data$Date.of.Death, format="%d/%m/%Y")
surv_data <- read.table("Downloads/whas100_rev.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
View(surv_data)
surv_data_with_var <- surv_data %>%
mutate(surv_time= ifelse(!is.na(admitdate) & !is.na(Date.of.Death), as.numeric(difftime(as.Date(Date.of.Death), as.Date(admitdate), unit="days")), NA)) %>%
mutate(binary_death= ifelse(VitalStatus=="Dead", 1, 0))
surv_data_with_var <- surv_data %>%
mutate(surv_time= as.Date(ifelse(!is.na(admitdate) & !is.na(Date.of.Death), as.numeric(difftime(Date.of.Death, admitdate, unit="days")), NA))) %>%
mutate(binary_death= ifelse(VitalStatus=="Dead", 1, 0))
surv_data <- read.table("Downloads/whas100_rev.txt", header = TRUE, sep = "\t", stringsAsFactors = FALSE)
View(surv_data)
surv_data_with_var <- surv_data %>%
mutate(surv_time= as.Date(ifelse(!is.na(admitdate) & !is.na(Date.of.Death), as.character(as.numeric(difftime(Date.of.Death, admitdate, unit="days"))), NA))) %>%
mutate(binary_death= ifelse(VitalStatus=="Dead", 1, 0))
View(surv_data)
surv_data_with_var <- surv_data %>%
mutate(surv_time= as.Date(ifelse(!is.na(admitdate) & !is.na(Date.of.Death), as.character(as.numeric(difftime(Date.of.Death, admitdate, unit="days"))), NA)), format="%m/%d/%Y") %>%
mutate(binary_death= ifelse(VitalStatus=="Dead", 1, 0))
getwd()
setwd("~/final_project")
getwd()
.libPaths()
renv::init()
.libPath()
.libPaths()
renv::init()
renv::activate()
renv::status()
.libPaths()
getwd()
renv::activate()
load("~/final_project/.RData")
getwd()
renv::activate()
source("renv/activate.R")
renv::status()
renv::remove("gee")
renv::status()
renv::snapshot()
Y
renv::status()
renv::activate()
.libPaths()
renv::restore()
getwd()
renv::deactivate()
remove.packages("renv")
getwd()
install.packages("renv")
renv::init()
.libPaths()
getwd()
renv.activate()
renv::activate()
.libPaths()
source("renv/activate.R")
.libPaths()
